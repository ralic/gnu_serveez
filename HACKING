HACKING GNU Serveez					-*- org -*-

This file is both a guide for newcomers and a todo list for oldstayers.
It lives in the repo but is not included in the distribution.
See the end for copying conditions.

* next
*** features
***** Check for [[http://www.gnuvola.org/software/xdgdirs/][xdgdirs]]; use if no ‘-c FILENAME’.
*** internal
***** Move options processing to Scheme.
***** Move serveez ‘main’ to Scheme.
***** Start using gnulib.

* other stuff to do
*** [[elisp:(grep%20"git%20grep%20-n%20-H%20-E%20-e%20'(FIXME|TODO)'%20|%20grep%20-v%20-E%20'(^HACKING|ChangeLog)'")][grep FIXME|TODO]]
*** admin
***** Offload [[file:BUGS][BUGS]] to savannah (can we preserve history?).
*** build
***** Use hydra for continuous integration.
***** Use libtool more (libltdl et al).
*** Spiff docs (grammar and misc style fixes).
*** Support IPv6.
*** Expose relax/throttle time (formerly ‘RELAX_FD_TIME’) to cfg machinery.
*** Minimize memory consumption of coservers.
*** Find out how to unload a shared library on MacOS.
*** Keep track of network interface changes.
*** Make some of the configure-time servers available dynamically at run-time.
*** Resolve libcoserver problem (some linkers swallow syms because they are not needed in libserveez).
*** Runtime check for ‘sendfile’ (4 vs 7 args) in configure script.
*** How can a self connected Gnutella socket find out its port configuration for sending push requests and replies?
*** Implement a DNS server for home networks.
*** Implement a DNS client.
*** Content-Range implementation for Gnutella.
*** Implement Internet Relay Chat (IRC) bouncer.
*** Serveez on HURD.

* stuff that is already done
*** retirement of Guile 1.3.4 support
*** ([[file:BUGS::B0023][B0023]]) libserveez core touches ‘svz_socket_t.data’
*** ([[file:BUGS::B0022][B0022]]) coserver touch ‘svz_socket_t.data’
*** ([[file:BUGS::B0021][B0021]]) support VPATH "make check"
*** ([[file:BUGS::B0020][B0020]]) cache ‘svz_socket_t *’ SMOB
*** Also distribute .lz tarball.
*** Fix bugs.
***** (Guile 2) segfault in ‘guile_error’ if config file already closed
***** (maint) Bump Automake min vers to 1.12.2.
***** Add ‘--solitary’ to ‘serveez --help’ output, serveez(1).
***** (Guile 1.8) Import ‘(ice-9 rdelim) write-line’.
***** Finalize [[file:BUGS::B0018][B0018]] => cant-reproduce-wont-fix.
***** Finalize [[file:BUGS::B0012][B0012]] => cant-reproduce-wont-fix.
*** Modernize Scheme code.
***** (string-append DIR FILE) => in-vicinity
***** audit/rewrite one-armed ‘if’ expressions
***** use ‘reverse!’ instead of ‘reverse’
***** use ‘fs’, (widely available) SRFI and ice-9 modules
*** Update manpages; include release info.
*** Announce planned retirement of Guile 1.3.4 support.
*** Move to GPLv3+.
*** Fix bugs.
***** incomplete "make uninstall"
      It fails to delete $(includedir)/libserveez and $(pkgdatadir).
***** sloppy ‘sscanf’ (latent remote buffer overflow)
      e.g.: [[dbts:540657]]
      audit [[elisp:(find-dired%20"."%20"-name%20'*.%5Bhc%5D'%20-exec%20grep%20-qF%20sscanf%20'{}'%20\\%3B")][source code mentioning ‘sscanf’]]
      =>    [[file:src/http-server/http-core.c::777]]
      =>    [[file:src/irc-server/irc-server.c::67]] ([[file:zzz/2011-02-15.‘sscanf’%20in%20parsing%20irc%20server%20config][zzz]])
      =>    [[file:src/libserveez/coserver/dns.c::63]]
      =>    [[file:src/libserveez/coserver/reverse-dns.c::90]]
***** libserveez binary-incompatible between releases
      unoptimal (-release): (info "(libtool) Link mode")
      cool (-version-info): (info "(libtool) Versioning")
***** SIGINT causes segfault ([[svsup:107607]], [[file:zzz/2011-02-28.locked%20vs%20unlocked%20stdio][zzz]])
***** typo in ‘svz_portcfg_equal’ for protocol ‘pipe’
***** scope error in DNS return (src/irc-server/irc-server.c)
***** use ‘in_addr_t’ instead of ‘unsigned long’
***** detect ‘gettimeofday’ with #include <sys/time.h>
***** don't drop subsequent "TCP final write" on previous write flush
***** ensure current module for initialization is ‘(guile)’
*** Drop mkpassword.
*** Modernize bootstrap / build.
***** mv configure.in configure.ac
***** drop autogenerated files from repo
***** collect various scripts/tools into build-aux/
***** require libtool 2.4
***** modernize [[file:autogen.sh][autogen.sh]]
******* don't invoke ./configure
******* use symlinks
******* use autoreconf
******* don't invoke build-aux/autodsp
******* (if modern libtool ok) don't patch configure
***** modernize [[file:configure.ac][configure.ac]] and [[file:m4/inc.m4][m4/inc.m4]]
******* remove homegrown warnings/optimizations machinery
******* drop SVZ_SOLARIS_LIBTOOL ([[http://lists.gnu.org/archive/html/libtool/2011-02/msg00009.html][cruft]])
******* drop redundant AC_DEFINE forms
******* drop redundant AC_SUBST forms
******* use AC_PREREQ
******* m4: update AC_*, use AS_*, quote properly, etc
******* move AC_OUTPUT (and "print results") last
******* use LT_PREREQ, LT_INIT
******* remove --with-guile-source; move info to manual
******* prefer more precise check over ‘AC_EGREP_HEADER’
***** modernize [[elisp:(find-dired%20"."%20"-name%20Makefile.am")][Makefile.am files]]
******* don't use @MAINTAINER_MODE_TRUE@ directly
******* use $(FOO) instead of @FOO@
******* don't clobber Automake internal vars
******* collect common bits into build-aux/common.mk
********* AM_CPPFLAGS (was ‘INCLUDES’)
********* CLEANFILES
********* MAINTAINERCLEANFILES
******* segregate woe32
***** prune by-now standardized bits from [[file:doc/Makefile.am][doc/Makefile.am]]
***** move *.serveez file creation (woe32) to "make dist"
***** drop [[file:build-aux/debian.sh.in][debian]] and [[file:build-aux/redhat.sh.in][redhat]] scripts
***** add --enable-libserveez-install (default disabled)
*** Zonk ‘__PARAMS’; require prototypes.
*** Assume signal handlers return ‘void’.
*** Remove svz_t_{size,off}.
*** Remove svz_c_{const,signed}.
*** Clean up libserveez API ([[file:src/libserveez/API-HACKING][API-HACKING]]).
*** Update Guile support.
***** update internal interfaces
******* SCM_INUM (m) => gi_scm2int (f)
******* SCM_INUMP (m) => SCM_EXACTP (m)
******* SCM_MAKINUM (m) => gi_integer2scm (f)
******* SCM_VELTS (m) => ∅
******* SCM_WRITABLE_VELTS (m) => ∅
******* scm_c_string2str (f) => incorporated into gi_get_xrep
******* scm_c_symbol2str (f) => ∅
******* scm_cur_inp (v) => scm_current_input_port (f)
******* scm_int2num (f) => gi_integer2scm (f)
******* scm_listify (m) => gi_list_3 (f), gi_list_5 (f)
******* scm_long2num (f) => gi_integer2scm (f)
******* scm_makfrom0str (f) => gi_string2scm (f)
******* scm_mem2string (f) => gi_nstring2scm (f)
******* scm_must_free (f) => gi_free (f)
******* scm_must_malloc (f) => gi_malloc (f)
******* scm_must_realloc (f) => gi_reallc (f)
******* scm_num2long (f) => gi_scm2long (f)
******* scm_protect_object (f) => gi_gc_protect (f)
******* scm_str2symbol (f) => gi_symbol2scm (f)
******* scm_ulong2num (f) => gi_nnint2scm (f)
******* scm_unprotect_object (f) => gi_gc_unprotect (f)
***** snarf definitions
***** add proc ‘libserveez-features’
***** make buildable under Guile 2 (hint: see [[Mike Gran's fork]])
*** Enable / augment the Guile tests.
***** add driver
***** add tests
******* Guile server
******* binary objects
******* server misconfiguration
******* guile-server misconfiguration
*** Spiff documentation
***** move to GFDL 1.3
***** two spaces after sentences
***** merge API into primary manual
***** say "Scheme Procedure" instead of "Function"
***** index scheme interface elements
*** Prefix the #define's in 'svzconfig.h' by 'SVZ_' to avoid clashes with other applications.
*** Let the user create network device bindings.
*** Allow INADDR_ANY bindings again with all consequences.
*** Document compilation hints (--disable-shared, static guile, ...)
*** Make http-cache faster (in fact, faster than the fs).  Use other LRU detection.
*** Remove SOCK_MAX_ID limit.
*** Control proto 'stat id' should print socket-type specific info only.
*** Restartable (automatically) coservers (ident dies on aWCS mass test).
*** Allow implementing servers in Guile.
*** Convince the Guile people to accept patches for Windows compatibility.
*** Write a replacement for the inetd.
*** Make protocol detection limits / timeouts configurable.
*** Create a logo for Serveez.
*** Write an identd.
*** Define a CLF-compatible default http logfile format and make it being used.
*** Rename the 'local-ip' part of port configurations to some sane name.
*** Make Serveez embeddable (create libserveez.{so,dll}).
*** Implement dynamic server loading capabilities.
*** Consider Guile as configuration file parser.
*** Implement another example for an UDP server (drop q3key).
*** Start a reverse nslookup for each HTTP client.
*** Allow "/~user/*" HTTP requests.
*** Using encryption for passwords (libcrypt).
*** Port forwarder for UDP and TCP.
*** Support for ICMP sockets.
*** Content-Range implementation for HTTP.
*** Gnutella spider should share files.
*** Make HTTP CGI file extension associations configurable in Win32.
*** Add ‘--disable-poll’ option.
*** For directory list: scandir, alphasort, qsort.
*** Make Serveez automatically compile Sizzle again.
*** Hack until WsControl tells the interface list on M$-Windows.
*** What to do if coserver delivers argument no longer valid?
*** Default file reader to avoid HTTP using its own callback.
*** Socket/protocol specific flags within socket structure.
*** Find out how the list of local interfaces works on different Unices.
*** Do something sensible when a coserver fails its job.
*** IP address representation must be unsigned long everywhere.
*** Rechain socket list to avoid starving of chain end.
*** Convert all protocols to new scheme.
*** Support local Sizzle installations (sizzle-config).
*** Local ip addresses for portcfg.
*** List of local ip addresses on supported systems.
*** HTTP: Make DefaultType and TypesConfig configurable.
*** Support for UDP sockets.
*** HTTP access logfile.
*** Implement a real nslookup coserver or integrate it in the reverse lookup coserver.
*** How to exec CGI scripts on Win32 that are not exe/com/bat?
*** HTTP cache reinit via control protocol.
*** Configuration file handling.
*** Wrapper for snprintf (not on Compaq Tru64 Dec).
*** Implement Internet Relay Chat (IRC) protocol.
*** Set user and group id when executing CGI scripts.
*** HTTP directory listing when file is missing.
*** HTTP file cache.
*** Fix the problem with using Guile as a coserver.
*** Don't kick coservers on master server death.
*** Add configure switch ‘--enable-warning’. (1999-11-14/mgrabmue)
*** Add configure option for detecting whether ‘usleep’ is defined.
*** Add configure option for specifying max clients at configure time. (1999-11-14/mgrabmue)
*** Check client ids which come from the master server for validity. (1999-10-26/mgrabmue)
*** Implement a HTTP plugin for streaming sounds and pictures.
*** Make the protocol for coservers (e.g., ident) clean and document it.
*** Debug the aWCS protocol -- massclient with more than 4 threads kills the master server. (1999-10-20/raimi)
*** Only accept master server if first message is "6 \0".
*** Implement aWCS client detection.
*** Implement ident lookup (do in a ‘fork’ed server or do it unblocking).
*** Implement reverse lookup for client IPs (use raimi's ‘dns_reverse_lookup’ after ‘fork’ing).
*** Implement protocol detection.
*** Implement control protocol.
*** Add autoconf support for C and CPP flags. (1999-10-19/mgrabmue)
*** Add autoconf support for reverse host name lookup. (1999-10-19/mgrabmue)
*** Check ‘select’ for EINV and reap socket structure if happening. (1999-10-21/mgrabmue)
*** Catch and ignore SIGPIPE. (1999-10-21/mgrabmue)
*** Make a --disable-debug switch to shut up all log printings beyond errors and wrap all calls to ‘log_printf’. (1999-10-21/mgrabmue)
*** Hold all socket structures in a hash table to speed up client lookup. (1999-10-21/mgrabmue)
*** socket.o: In function ‘sock_printf’:
  /chat/serveez-0.0.2/src/socket.c:565: undefined reference to
  `vsnprintf'
  under cygwin - make the configure checking for vsnprintf
  working. (1999-10-21/mgrabmue)
*** Check whether libnsl is needed (like on Solaris). (1999-10-21/mgrabmue)

* bootstrap tools (see also [[file:autogen.sh][autogen.sh]])
*** usual GNU stuff: Libtool, Autoconf, Automake
*** Unofficial Guile (1.4.x) or GNU Guile (1.8.x or later)
*** [[http://www.gnuvola.org/software/guile-baux/][Guile-BAUX]]

* coding standards
*** versioning
***** libserveez -- (info "(libtool) Libtool versioning")
***** serveez(1) -- MAJOR.MINOR -- bump MAJOR on backward incompat
*** no trailing whitespace, no leading tabs
    ;; one time: (untabify (point-min) (point-max))
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
    (setq indent-tabs-mode nil)
*** GNU style, opportunistically
    (setq c-file-style "gnu")
    (add-to-list 'font-lock-keywords-alist
                 '(autoconf-mode
                   ((("\\(SVZ_[A-Z_]+\\)("
                      1 font-lock-function-name-face)))))
*** ChangeLog / VCS log
***** normally
      ChangeLog entries should match VCS log entries in the body.
      The canonical form for a VCS entry is:

        TITLE

        SHORT-PARAGRAPH

        ENTRY-CONVENTIONS
        * FILE (FUNC): DESCRIPTION.

      There are two newlines between TITLE and SHORT-PARAGRAPH, and in
      between SHORT-PARAGRAPH and ENTRY-CONVENTIONS, both of which are
      optional (if both are omitted, omit also the two newlines between
      them, leaving only two newlines between TITLE and the rest of the
      entry).  TITLE is one line only.

      This format is a superset of the GNU Coding Standards
      (info "(standards) Change Logs"), which does not provide for
      SHORT-PARAGRAPH or ENTRY-CONVENTIONS, and considers TITLE to
      be optional.

      Most information about the change should be placed in the source
      code comments.  SHORT-PARAGRAPH is for referencing bug reports,
      giving credit (i.e., "Reported by" and "Suggested by" blurbs),
      and pointers to the origin of regressions (using conventional
      format "Regression introduced YYYY-MM-DD [TITLE].")

      ENTRY-CONVENTIONS describe entry-specific abbreviations or
      implicitly shared descriptions.  For example, instead of this:

        * foo.c: #include "header.h".
        (foo): Use ‘func’.
        * bar.c: #include "header.h".
        (bar, baz): Use ‘func’.
        (qux): Update call to ‘bar’.
        * doc.texi (ref): Mention "header.h".

      you can write this:

        Here, all C files now #include "header.h";
        "U" means "Use ‘func’".
        * foo.c (foo): U.
        * bar.c (bar, baz): U.
        (qux): Update call to ‘bar’.
        * doc.texi (ref): Mention "header.h".

      In this particular example, you can also write:

        Here, all C files now #include "header.h".
        * foo.c (foo): Use ‘func’.
        * bar.c (bar, baz): Likewise.
        (qux): Update call to ‘bar’.
        * doc.texi (ref): Mention "header.h".

***** entries titled with suffix "; nfc."
      Some changes don't merit an entry in ChangeLog; for those, simply
      append "; nfc." (non-fruitful change) to the TITLE to mark that
      its omission from the ChangeLog is intentional.  You can omit
      other sections if you wish.  For example, here is a one line
      (TITLE only) entry:

      [maint] Add top-level file HACKING; nfc.

***** conventions for TITLE
******* tag
	To help identify the area of the change, include one or more
	tags in square braces at the beginning of the TITLE.  For
	example, ‘maint’ for maintenance, ‘int’ for internal, ‘api’,
	‘guile’, etc.  Because space in the TITLE is limited, tags
	should be short and (if more than one) separated by a space.
	For example:

	[guile int] Avoid deprecated libguile elements.

******* globbing ok
	Unlike in the rest of the ChangeLog entry, you can use wildcards
	(globbing) in the TITLE.  This saves space.

******* normally, complete sentence; stylized, sometimes
	Use a complete sentence, in the same style as the DESCRIPTION
	part.  An exception to this is adding or deleting elements of
	some group, for which you can use "New" or "Removed" followed
	by "GROUP: ELEMENT,...".  Each ELEMENT should be left unquoted.
	Some examples, in normal/stylized pairs:

	[api] Add func ‘foo_bar_baz’.
	[api] New func: foo_bar_baz
	[int] Add bus commands ‘WAIT’, ‘PROBE’.
	[int] New bus commands: WAIT, PROBE
	[guile] Remove bindings ‘gh_car’, ‘gh_cdr’, ‘gh_list’.
	[guile] Removed 3 bindings: gh_*

	Note that the stylized example in the last pair uses globbing.

*** copyright policy
***** update every year, unconditionally
***** (if (< 2 (- END BEGIN)) RANGE INDIVIDUAL)

* repo branch discipline
*** no ‘master’ -- do not panic!
*** archive
    This branch is for what was already released.  It will never be rebased.
    Its tip will always have a commit title starting with "Release".
*** next -- stuff for the next release
    This branch is work for the next release.  It will never be rebased.
*** p -- "perhaps", "probably"
    This branch is where largely-stable changes intended for the next release
    live.  It's very unlikely to undergo rebase, but not entirely impossible.
    A rebase MUST be announced to the bug-report address.
    Hackers probably want to start here.
*** q-TOPIC -- "questionably", "querulously"
    These are experimental, exploring the particular TOPIC.  They are intended
    to be ephemeral, undergoing rebase, amendment, and ultimately removal.

* etc
#+STARTUP: odd
#+LINK: dbts   http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=
#+LINK: svsup  https://savannah.gnu.org/support/?


Copyright (C) 2011-2014 Thien-Thi Nguyen
Copyright (C) 2000, 2001, 2002 Stefan Jahn <stefan@lkcc.org>

Copying and distribution of this file, with or without modification,
are permitted provided the copyright notice and this notice are preserved.
